{"version":3,"sources":["ToDo.js","firebse.js","App.js","reportWebVitals.js","index.js"],"names":["ToDo","props","List","className","ListItem","ListItemAvatar","ListItemText","primary","text","secondary","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todos","setTodos","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","todo","console","log","FormControl","InputLabel","Input","value","onChange","event","target","Button","disable","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAiBeA,MAZf,SAAcC,GACZ,OACE,cAACC,EAAA,EAAD,CAAMC,UAAU,YAAhB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAcC,QAASN,EAAMO,KAAMC,UAAU,yB,yDCetCC,EAbKC,IAASC,cAAc,CACvCC,OAAQ,0CACTC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGKC,YCuCRC,MAxDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAGeF,mBAAS,IAHxB,mBAGJG,EAHI,KAGGC,EAHH,KA6BX,OAxBAC,qBAAU,WAERlB,EAAGmB,WAAW,SAASC,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAE5DP,EAASO,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,cAE9C,IACHC,QAAQC,IAAI,IAAIb,GAkBhB,sBAAKvB,UAAU,MAAf,UACE,6CACA,iCAEA,eAACqC,EAAA,EAAD,WAEJ,cAACC,EAAA,EAAD,2BACA,cAACC,EAAA,EAAD,CAAOC,MAAOjB,EAAOkB,SAAU,SAAAC,GAAK,OAAIlB,EAASkB,EAAMC,OAAOH,aAI1D,cAACI,EAAA,EAAD,CAAQC,SAAUtB,EAAOuB,KAAK,SAASC,QA3BzB,SAACL,GAEfA,EAAMM,iBAENzC,EAAGmB,WAAW,SAASuB,IAAI,CACzBf,KAAMX,EACN2B,UAAW1C,IAASU,UAAUiC,WAAWC,oBAI7CjB,QAAQC,IAAI,KAAK,gBACjBd,EAAS,GAAD,mBAAKD,GAAL,CAAWE,KACnBC,EAAS,KAekD6B,QAAQ,YAAYC,MAAM,UAAnF,yBAKA,6BACGjC,EAAMU,KAAI,SAAAG,GAAI,OACf,aADuB,CACtB,EAAD,CAAM7B,KAAM6B,aC3CLqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df1f016c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ToDo.css';\r\nimport { List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core'\r\n\r\n\r\nfunction ToDo(props) {\r\n  return (\r\n    <List className=\"todo_list\">\r\n      <ListItem>\r\n        <ListItemAvatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary={props.text} secondary=\"Dummy Deadline\"/>\r\n      </ListItem>\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default ToDo\r\n","// const firebaseConfig = {\r\n  // apiKey: \"AIzaSyAMB1U1Y7i-ya3m1W2qsi9gZ49bJd_maKI\",\r\n  // authDomain: \"todo-app-cp-ab61d.firebaseapp.com\",\r\n  // databaseURL: \"https://todo-app-cp-ab61d.firebaseio.com\",\r\n  // projectId: \"todo-app-cp-ab61d\",\r\n  // storageBucket: \"todo-app-cp-ab61d.appspot.com\",\r\n  // messagingSenderId: \"626350365962\",\r\n  // appId: \"1:626350365962:web:c701ba7e2d57b9ccbbeef3\",\r\n  // measurementId: \"G-B1SCB8BPQL\"\r\n// };\r\n\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAMB1U1Y7i-ya3m1W2qsi9gZ49bJd_maKI\",\r\n   authDomain: \"todo-app-cp-ab61d.firebaseapp.com\",\r\n   databaseURL: \"https://todo-app-cp-ab61d.firebaseio.com\",\r\n   projectId: \"todo-app-cp-ab61d\",\r\n   storageBucket: \"todo-app-cp-ab61d.appspot.com\",\r\n   messagingSenderId: \"626350365962\",\r\n   appId: \"1:626350365962:web:c701ba7e2d57b9ccbbeef3\",\r\n   measurementId: \"G-B1SCB8BPQL\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useEffect, useState } from 'react';\nimport ToDo from './ToDo';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport db from './firebse';\nimport firebase from 'firebase';\n\nfunction App() {\n    const [todos, setTodos] = useState([]);\n    /* { useSatate = react hook } todos=collect the values in the array or list; setTools= it allows changes to be done add,delete,etc to the list.(note: refreshing window after changing the list wont store data in db as it is state(short term memory locator), so we setup db such that after changing the list values get updated)*/\n    const [input, setInput] = useState('');\n    // When the app loads, we need to listn to thedb and fetch new todos as they get added/removed\n    useEffect(() => {\n      //this code here... fires when the app.js laods\n      db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n       // console.log(snapshot.docs.map(doc => doc.data().todo));\n        setTodos(snapshot.docs.map(doc => doc.data().todo))\n      })\n    }, []);\n    console.log('>',input);\n\n    const addTodo = (event) => {\n      //this will fire off when we click the button\n      event.preventDefault(); // Will stop the refresh\n\n      db.collection('todos').add({\n        todo: input,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })\n\n\n    console.log('>>','Im working!!');\n    setTodos([...todos,input]);\n    setInput(''); //clear up the input after clicking add todo button\n    }\n\n    return(\n    <div className=\"App\">\n      <h1>Hello World</h1>\n      <form>\n\n      <FormControl>   \n        \n  <InputLabel>Write a ToDo</InputLabel>\n  <Input value={input} onChange={event => setInput(event.target.value)}/>\n\n</FormControl>\n\n      <Button disable={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">\n      Add ToDo\n      </Button>\n      {/* <button type=\"submit\" onClick={addTodo}>Add ToDo</button> */}\n      </form>\n      <ul>\n        {todos.map(todo => (   /* Like a for loop in JSX were map go through every array item and list it down */\n        <ToDo text={todo}/>\n          //<li>{todo}</li>\n        ))}\n      </ul>\n    </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}